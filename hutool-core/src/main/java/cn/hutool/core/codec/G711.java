package cn.hutool.core.codec;

/**
 * G.711 标准下主要有两种压缩算法。一种是&micro;-law algorithm （又称often u-law, ulaw, mu-law），主要运用于北美和日本；
 * 另一种是A-law algorithm，主要运用于欧洲和世界其他地区。其中，后者是特别设计用来方便计算机处理的。
 * 这里实现的是A-law algorithm,常用与音频通话数据压缩(有损压缩)，压缩率50%，有效节省带宽
 * @description: G711A-alw
 * @author: lhDream
 * @create: 2021-12-28 19:52
 * https://blog.csdn.net/qq_41054313/article/details/80952277
 **/
public class G711 {

	private static short[] aLawDecompressTable = new short[]
			{ -5504, -5248, -6016, -5760, -4480, -4224, -4992, -4736, -7552, -7296, -8064, -7808, -6528, -6272, -7040, -6784, -2752, -2624, -3008, -2880, -2240, -2112, -2496, -2368, -3776, -3648, -4032, -3904, -3264, -3136, -3520, -3392, -22016, -20992, -24064, -23040, -17920, -16896, -19968, -18944, -30208, -29184, -32256, -31232, -26112, -25088, -28160, -27136, -11008, -10496, -12032, -11520, -8960, -8448, -9984, -9472, -15104, -14592, -16128, -15616, -13056, -12544, -14080, -13568, -344, -328, -376,
					-360, -280, -264, -312, -296, -472, -456, -504, -488, -408, -392, -440, -424, -88, -72, -120, -104, -24, -8, -56, -40, -216, -200, -248, -232, -152, -136, -184, -168, -1376, -1312, -1504, -1440, -1120, -1056, -1248, -1184, -1888, -1824, -2016, -1952, -1632, -1568, -1760, -1696, -688, -656, -752, -720, -560, -528, -624, -592, -944, -912, -1008, -976, -816, -784, -880, -848, 5504, 5248, 6016, 5760, 4480, 4224, 4992, 4736, 7552, 7296, 8064, 7808, 6528, 6272, 7040, 6784, 2752, 2624,
					3008, 2880, 2240, 2112, 2496, 2368, 3776, 3648, 4032, 3904, 3264, 3136, 3520, 3392, 22016, 20992, 24064, 23040, 17920, 16896, 19968, 18944, 30208, 29184, 32256, 31232, 26112, 25088, 28160, 27136, 11008, 10496, 12032, 11520, 8960, 8448, 9984, 9472, 15104, 14592, 16128, 15616, 13056, 12544, 14080, 13568, 344, 328, 376, 360, 280, 264, 312, 296, 472, 456, 504, 488, 408, 392, 440, 424, 88, 72, 120, 104, 24, 8, 56, 40, 216, 200, 248, 232, 152, 136, 184, 168, 1376, 1312, 1504, 1440, 1120,
					1056, 1248, 1184, 1888, 1824, 2016, 1952, 1632, 1568, 1760, 1696, 688, 656, 752, 720, 560, 528, 624, 592, 944, 912, 1008, 976, 816, 784, 880, 848 };

	private final static int cClip = 32635;
	private static byte[] aLawCompressTable = new byte[]{ 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7 };

	/**
	 * 编码  pcm  to  G711 a-law
	 * @param b PCM裸流数据
	 * @return G711
	 */
	public static byte[] encode( byte[] b){
		int j = 0;
		int count = b.length / 2;
		short sample ;
		byte[] res = new byte[count];
		for ( int i = 0; i < count; i++ ){
			sample = (short) ( ( ( b[j++] & 0xff ) | ( b[j++] ) << 8 ) );
			res[i] = linearToALawSample( sample );
		}
		return res;
	}


	/**
	 * 解码
	 * @param b G711
	 * @return PCM裸流
	 */
	public static byte[] decode( byte[] b){
		int j = 0;
		byte[] res = new byte[b.length*2];
		for ( int i = 0; i < b.length; i++ ){
			short s = aLawDecompressTable[b[i] & 0xff];
			res[j++] = (byte) s;
			res[j++] = (byte) ( s >> 8 );
		}
		return res;
	}

	private static byte linearToALawSample( short sample ){
		int sign;
		int exponent;
		int mantissa;
		int s;

		sign = ( ( ~sample ) >> 8 ) & 0x80;
		if ( sign != 0x80  ){
			sample = (short) -sample;
		}
		if ( sample > cClip ){
			sample = cClip;
		}
		if ( sample >= 256 ){
			exponent = aLawCompressTable[( sample >> 8 ) & 0x7F];
			mantissa = ( sample >> ( exponent + 3 ) ) & 0x0F;
			s = ( exponent << 4 ) | mantissa;
		}else{
			s = sample >> 4;
		}
		s ^= ( sign ^ 0x55 );
		return (byte) s;
	}

}
